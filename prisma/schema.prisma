// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    events      Event[]
    calendar    Calendar?
    likedEvents EventLike[]

    chatRooms        ChatRoom[]
    chatRoomMessages ChatRoomMessage[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//------------------------------------------------------------------------
model Calendar {
    id     String  @id @default(cuid())
    events Event[]

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String @unique

    @@unique([ownerId, id])
}

model Event {
    id      String   @id @default(cuid())
    title   String
    date    DateTime
    content String?  @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    hostId String
    host   User   @relation(fields: [hostId], references: [id])

    calendars Calendar[]
    likes     EventLike[]

    chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
    chatRoomId String   @unique

    @@unique([createdAt, id])
    @@index([hostId])
}

model EventLike {
    id String @id @default(cuid())

    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String

    @@unique([userId, eventId])
    @@index([userId])
    @@index([eventId])
}

model ChatRoom {
    id          String  @id @default(cuid())
    title       String
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users    User[]
    messages ChatRoomMessage[]

    event Event?
}

model ChatRoomMessage {
    id      String @id @default(cuid())
    content String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    parent   ChatRoomMessage?  @relation("parent_reply", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) //TODO - handle deleted messages
    parentId String?
    reply    ChatRoomMessage[] @relation("parent_reply")

    chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
    chatRoomId String

    sender   User   @relation(fields: [senderId], references: [id])
    senderId String

    @@unique([createdAt, id])
    @@index([chatRoomId])
    @@index([senderId])
    @@index([parentId])
}
